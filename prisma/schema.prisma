// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int         @id @default(autoincrement())
  email     String      @unique
  name      String?
  posts     Post[]
  group     Group[]
  GroupPost GroupPost[]
  comments  Comments[]
  likes     Likes[]
}

model Post {
  id           Int            @id @default(autoincrement())
  title        String
  content      String?
  published    Boolean?       @default(false)
  author       User?          @relation(fields: [authorId], references: [id])
  authorId     Int?
  PostCategory PostCategory[]
  comments     Comments[]
  likes        Likes[]

  @@index([authorId])
}

model Category {
  id           Int            @id @default(autoincrement())
  name         String
  rank         Int
  PostCategory PostCategory[]
  groupPost    GroupPost[]
}

model PostCategory {
  id         Int      @id @default(autoincrement())
  post       Post     @relation(fields: [postId], references: [id])
  postId     Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
}

model Group {
  id        Int         @id @default(autoincrement())
  users     User[]
  GroupPost GroupPost[]
}

model GroupPost {
  id         Int        @id @default(autoincrement())
  title      String
  content    String
  owner      User?      @relation(fields: [ownerId], references: [id])
  ownerId    Int
  group      Group?     @relation(fields: [groupId], references: [id])
  groupId    Int
  categories Category[]

  @@index([ownerId])
}

model Connection {
  id          Int @id @default(autoincrement())
  followerId  Int
  followingId Int

  @@index([followerId, followingId])
}

model Comments {
  id        Int      @id @default(autoincrement())
  content   String
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Likes {
  id     Int  @id @default(autoincrement())
  post   Post @relation(fields: [postId], references: [id])
  postId Int
  user   User @relation(fields: [userId], references: [id])
  userId Int
}
